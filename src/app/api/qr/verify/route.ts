
// src/app/api/qr/verify/route.ts
import { NextResponse } from 'next/server';
import { auth } from '@/lib/firebase-admin'; // Sunucu tarafı için Firebase Admin SDK
import { db } from '@/lib/firebase'; // Firestore client SDK
import { collection, query, where, getDocs, writeBatch } from 'firebase/firestore';
import { headers } from 'next/headers';

export async function POST(request: Request) {
  try {
    // 1. Taramayı yapan kullanıcının kimliğini doğrula
    const authorization = headers().get('Authorization');
    if (!authorization?.startsWith('Bearer ')) {
      return NextResponse.json({ error: 'Unauthorized: No scanner token provided' }, { status: 401 });
    }
    const idToken = authorization.split('Bearer ')[1];
    
    let scannerDecodedToken;
    try {
        scannerDecodedToken = await auth.verifyIdToken(idToken);
    } catch (error) {
      return NextResponse.json({ error: 'Unauthorized: Invalid scanner token' }, { status: 401 });
    }
    const scannerUid = scannerDecodedToken.uid;

    // 2. İstekten taranan token'ı al
    const { token: scannedToken } = await request.json();
    if (!scannedToken) {
      return NextResponse.json({ error: 'No QR token provided in request' }, { status: 400 });
    }

    // 3. Firestore'da token'ı bul
    const tokensRef = collection(db, 'qrTokens');
    const q = query(tokensRef, where('token', '==', scannedToken));
    const querySnapshot = await getDocs(q);

    if (querySnapshot.empty) {
      return NextResponse.json({ error: 'Invalid or expired QR code.' }, { status: 404 });
    }

    const tokenDoc = querySnapshot.docs[0];
    const tokenData = tokenDoc.data();

    // 4. Token'ın geçerliliğini kontrol et
    if (tokenData.isUsed) {
      return NextResponse.json({ error: 'This QR code has already been used.' }, { status: 410 }); // 410 Gone
    }

    if (tokenData.expiresAt.toDate() < new Date()) {
      return NextResponse.json({ error: 'This QR code has expired.' }, { status: 410 });
    }
    
    // Kendin kendi QR kodunu okuyamazsın.
    if (tokenData.generatorUid === scannerUid) {
        return NextResponse.json({ error: 'You cannot scan your own QR code.' }, { status: 403 });
    }

    // 5. Token'ı "kullanıldı" olarak işaretle
    const batch = writeBatch(db);
    batch.update(tokenDoc.ref, {
      isUsed: true,
      usedBy: scannerUid,
      usedAt: new Date(),
    });
    await batch.commit();

    // 6. Başarı yanıtı gönder (örneğin, token'ı üreten kullanıcının ID'si ile)
    // İleride bu kısım, bir arkadaşlık isteği gönderme, bir puan verme vb. gibi işlemleri tetikleyebilir.
    console.log(`QR Token ${scannedToken} used by ${scannerUid}. Generated by ${tokenData.generatorUid}`);
    
    // Token'ı üreten kullanıcının profilini alıp kullanıcı adını döndürelim
    const generatorUserRecord = await auth.getUser(tokenData.generatorUid);
    const generatorUsername = generatorUserRecord.email?.split('@')[0] || 'unknown'; // veya profil bilgisinden al

    return NextResponse.json({
      success: true,
      message: 'QR code verified successfully!',
      generatorUid: tokenData.generatorUid,
      generatorUsername: generatorUsername, // Frontend'in profile yönlendirmesi için
    });

  } catch (error) {
    console.error('Error verifying QR token:', error);
    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });
  }
}
